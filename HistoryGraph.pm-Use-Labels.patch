#
# old_revision [26591f968f966b814a4518604019bead88bb1536]
#
# patch "lib/perl/HistoryGraph.pm"
#  from [3ea926faea9d9a0c400de1d22afb40ea7e66c4c4]
#    to [c249b1c0bae7ea0b50e56297d5bff002c6a0883d]
#
============================================================
--- lib/perl/HistoryGraph.pm	3ea926faea9d9a0c400de1d22afb40ea7e66c4c4
+++ lib/perl/HistoryGraph.pm	c249b1c0bae7ea0b50e56297d5bff002c6a0883d
@@ -53,7 +53,7 @@ use constant DPI              => 72;
 
 use constant CANVAS_BORDER    => 5;
 use constant DPI              => 72;
-use constant FONT_SIZE        => 10;
+use constant FONT_SIZE        => 8;
 use constant HEIGHT           => 28;
 use constant LINE_WIDTH       => 2;
 use constant SELECTION_BORDER => 5;
@@ -73,7 +73,6 @@ use constant SUSPENDED_NODE => 0x08;
 
 # Constants representing certain colours.
 
-use constant FONT_COLOUR                => "Black";
 use constant NOT_SELECTED_BORDER_COLOUR => "Gray";
 use constant SELECTED_BORDER_COLOUR     => "Black";
 use constant SELECTION_COLOUR           => "Tomato";
@@ -1853,25 +1852,21 @@ sub dot_input_handler_cb($$)
     my ($child_db,
         $hex_id_height,
         $hex_id_width,
-        @revision_ids,
-        $text_item);
+        $layout,
+        @revision_ids);
 
     # Temporarily switch our locale to the standard default C one. We don't
     # want floats to be written with commas in them for instance.
 
     setlocale(LC_ALL, "C");
 
-    # Create a canvas text item and then use it to get the pixel size of a hex
-    # id when displayed on the screen. This text item is also used later on for
-    # any tags that need to be displayed.
+    # Create a layout object based on the main graph window and then use it to
+    # get the pixel size of a hex id when displayed on the screen. This layout
+    # is also used later on for any tags that need to be displayed.
 
-    $text_item = Gnome2::Canvas::Item->new
-        ($instance->{graph_canvas}->root(),
-         "Gnome2::Canvas::Text",
-         font_desc  => $instance->{fontdescription},
-         text       => "A" x HEX_ID_LENGTH);
-    $hex_id_width = $text_item->get("text-width");
-    $hex_id_height = $text_item->get("text-height");
+    $layout = $instance->{window}->create_pango_layout("A" x HEX_ID_LENGTH);
+    $layout->set_font_description($instance->{fontdescription});
+    ($hex_id_width, $hex_id_height) = $layout->get_pixel_size();
     $hex_id_height = max(HEIGHT, $hex_id_height + (TEXT_BORDER * 2));
     $hex_id_width = max(WIDTH, $hex_id_width + (TEXT_BORDER * 2));
 
@@ -1917,9 +1912,9 @@ sub dot_input_handler_cb($$)
             $fh_in->print("  \"" . $revision_id . "\"");
             if (defined($tag = get_node_tag($instance, $revision_id)))
             {
-                $text_item->set(text => $tag);
+                $layout->set_text($tag);
                 $width = max(WIDTH,
-                             $text_item->get("text-width")
+                             ($layout->get_pixel_size())[0]
                                  + (TEXT_BORDER * 6));
             }
             if ($width != WIDTH)
@@ -1992,10 +1987,6 @@ sub dot_input_handler_cb($$)
     $fh_in->print("}\n");
     $fh_in->close();
 
-    # Destroy the canvas text item that was used in the font size calculations.
-
-    $text_item->destroy();
-
     # Reset our locale back to the local one again.
 
     setlocale(LC_ALL, "");
@@ -2037,7 +2028,7 @@ sub draw_graph($)
                                   x => CANVAS_BORDER,
                                   y => CANVAS_BORDER);
 
-    $instance->{graph}->{node_text_items} = [];
+    $instance->{graph}->{node_labels} = [];
     $instance->{graph}->{selection_box} = Gnome2::Canvas::Item->new
         ($instance->{graph}->{group},
          "Gnome2::Canvas::Rect",
@@ -2073,7 +2064,8 @@ sub draw_graph($)
     foreach my $rectangle (@{$instance->{graph_data}->{rectangles}})
     {
 
-        my ($tag,
+        my ($label,
+            $tag,
             $text,
             $widget);
         my $node = $child_db->{$rectangle->{revision_id}};
@@ -2114,7 +2106,8 @@ sub draw_graph($)
              width_pixels   => LINE_WIDTH);
 
         # Now the text, use a revision's tag and failing that use the first
-        # eight characters of its hex id.
+        # eight characters of its hex id. Also use a Gtk2::Label as the
+        # Gnome2::Canvas::Text widget just takes too long to render.
 
         if (defined($tag = get_node_tag($instance, $rectangle->{revision_id})))
         {
@@ -2124,21 +2117,20 @@ sub draw_graph($)
         {
             $text = substr($rectangle->{revision_id}, 0, HEX_ID_LENGTH);
         }
+        $label = Gtk2::Label->new($text);
+        $label->modify_font($instance->{fontdescription});
+        $label->show();
+        push(@{$instance->{graph}->{node_labels}}, $label);
         $widget = Gnome2::Canvas::Item->new
             ($node_group,
-             "Gnome2::Canvas::Text",
-             x          => $rectangle->{tl_x}
-                           + floor(($rectangle->{br_x} - $rectangle->{tl_x}
-                                    + 1) / 2),
-             y          => $rectangle->{tl_y}
-                           + floor(($rectangle->{br_y} - $rectangle->{tl_y}
-                                    + 1) / 2),
-             font_desc  => $instance->{fontdescription},
-             text       => $text,
-             fill_color => FONT_COLOUR);
+             "Gnome2::Canvas::Widget",
+             widget => $label,
+             height => $rectangle->{br_y} - $rectangle->{tl_y} + 1,
+             width  => $rectangle->{br_x} - $rectangle->{tl_x} + 1,
+             x      => $rectangle->{tl_x},
+             y      => $rectangle->{tl_y});
         $widget->raise_to_top();
         $widget->show();
-        push(@{$instance->{graph}->{node_text_items}}, $widget);
 
         $node_group->signal_connect
             ("event",
@@ -2464,7 +2456,8 @@ sub scroll_to_node($$)
 #
 #   Routine      - scale_canvas
 #
-#   Description  - Adjust the scale of the canvas widgets.
+#   Description  - Adjust the scale of the canvas widgets and associated
+#                  labels.
 #
 #   Data         - $instance : The history graph window instance.
 #
@@ -2486,24 +2479,24 @@ sub scale_canvas($)
     $wm->update_gui();
 
     # Adjust the canvas zoom factor, also resize the fonts on all the text
-    # items (hiding them when the text gets too small to be of any use).
+    # labels (hiding them when the text gets too small to be of any use).
 
     $instance->{graph_canvas}->set_pixels_per_unit($instance->{scale});
     if ((FONT_SIZE * $instance->{scale}) < 3)
     {
-        foreach my $text_item (@{$instance->{graph}->{node_text_items}})
+        foreach my $label (@{$instance->{graph}->{node_labels}})
         {
-            $text_item->hide();
+            $label->hide();
         }
     }
     else
     {
         $instance->{fontdescription}->set_size
             (floor(FONT_SIZE * $instance->{scale}) * PANGO_SCALE);
-        foreach my $text_item (@{$instance->{graph}->{node_text_items}})
+        foreach my $label (@{$instance->{graph}->{node_labels}})
         {
-            $text_item->set(font_desc => $instance->{fontdescription});
-            $text_item->show();
+            $label->modify_font($instance->{fontdescription});
+            $label->show();
         }
     }
 
@@ -3122,9 +3115,9 @@ sub reset_history_graph_window($)
 
     my $group = $instance->{graph}->{group};
 
-    $instance->{graph} = {group           => undef,
-                          node_text_items => [],
-                          selection_box   => undef};
+    $instance->{graph} = {group         => undef,
+                          node_labels   => [],
+                          selection_box => undef};
     $group->destroy() if defined($group);
     $instance->{graph_canvas}->set_scroll_region(0, 0, 0, 0);
     foreach my $item ($instance->{graph_advanced_find_button},
